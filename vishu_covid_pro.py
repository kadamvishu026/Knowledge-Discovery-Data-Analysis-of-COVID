# -*- coding: utf-8 -*-
"""vishu_covid pro.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kDL94oiwtG4SJCyvCYeqWKKmwjxNMNlh
"""

import pandas as pd
from matplotlib import pyplot as plt
import seaborn as sns
import datetime as dt
import numpy as np

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/MyDrive/patient_data.csv')

df.head()

covid =df[['Patient Number','Age Bracket','Gender','Num Cases']]

covid.head()

covid.tail()

covid.isnull().sum()

covid.shape

df = covid.dropna(axis=0)

df.isnull().sum()

df.shape

df.replace({'Gender':{'F':0,'M':1,'Non-Binary':np.NAN,'M,':np.NAN, 'Femal e':np.NAN}},inplace=True)
df.head()

df1=df
df1

df1.isnull().sum()

df = df1.dropna(axis=0)

df.isnull().sum()

df.round(0)

df.reset_index()

df = df[['Age Bracket', 'Num Cases']]
df

df['Num Cases'] = df[df['Num Cases'] == 1]['Num Cases']
df

df.isnull().sum()

df = df.dropna(axis=0)
df.isnull().sum()

plt.scatter(df['Age Bracket'], df['Num Cases'])
plt.xlabel('Age Bracket')
plt.ylabel('Num Cases')
plt.show()

age_bracket_dict = {
(0, 5): 1,
(6, 11): 2,
(12, 17): 3,
(18, 23): 4,
(24, 29): 5,
(30, 35): 6,
(36, 41): 7,
(42, 47): 8,
(48, 53): 9,
(54, 59): 10,
(60, 65): 11,
(66, 71): 12,
(72, 77): 13,
(78, 83): 14,
(84, 89): 15,
(90, 95): 16,
(96, 100): 17,
(101, 106): 18

}

for age_range, label in age_bracket_dict.items():
  df.loc[(df['Age Bracket'] >= age_range[0]) & (df['Age Bracket'] <= age_range[1]), 'Age Bracket'] = label

age_group = df.groupby(['Age Bracket']).size().reset_index(name='count')

age_group

df.reset_index()

x = age_group[['Age Bracket']]
x

y=age_group[['count']]
y

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test= train_test_split(x,y,test_size=0.2, random_state=0)

print(x_train.shape),print(x_test.shape),print(y_train.shape),print(y_test.shape)

from sklearn.preprocessing import MinMaxScaler
st_x= MinMaxScaler(feature_range=(0, 1)) 
x_train= st_x.fit_transform(x_train) 
x_test= st_x.transform(x_test)

from sklearn.linear_model import LinearRegression
model = LinearRegression()
#model.fit(x_train, y_train)

from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import mean_squared_error

poly_reg = PolynomialFeatures(degree=7)
X_poly = poly_reg.fit_transform(x)

model = LinearRegression()
model.fit(X_poly, y)

y_pred = model.predict(X_poly)

rmse = np.sqrt(mean_squared_error(y, y_pred))
print("Root Mean Squared Error: ", rmse)

plt.scatter(y, y_pred)
plt.xlabel("True Values")
plt.ylabel("Predictions")
plt.show()

import seaborn as sns

sns.regplot(x=y, y=y_pred)
plt.xlabel("True Values")
plt.ylabel("Predictions")
plt.show()

# Plot the regression line
plt.scatter(x, y, color='red')
plt.plot(x, model.predict(poly_reg.fit_transform(x)), color='blue')
plt.title('Polynomial Regression')
plt.xlabel('X')
plt.ylabel('y')
plt.show()

def label_to_age_range(label, age_bracket_dict):
    for age_range, l in age_bracket_dict.items():
        if l == label:
            return age_range
    return None

def age_to_label(age):
    for age_range, label in age_bracket_dict.items():
        if age >= age_range[0] and age <= age_range[1]:
            return label
    return None

label = 4
age_range = label_to_age_range(label, age_bracket_dict)
age_range

#new_data = 24
#new_age = age_to_label(new_data)
#new_age=[new_age]

#new_age = np.array(new_age)

# New data to make predictions on

new_data = 38
new_age = age_to_label(new_data)
new_age=[new_age]

new_age = np.array(new_age)

# Transform the new data into polynomial terms
new_data_poly = poly_reg.transform(new_age.reshape(-1, 1))

# Make predictions using the trained model
predictions = model.predict(new_data_poly)

# Print the predictions
print("Prediction: ", predictions)

if  2000 < predictions < 3000:
  print('If youre feeling unwell or experiencing any COVID-19 symptoms, such as fever or cough, self-isolate and get tested as soon as possible')
elif 4000 < predictions < 5000:
  print('Its important to take extra precautions to protect yourself and others from COVID-19, such as avoiding crowded places and limiting your social interactions')
elif 5000 < predictions < 6000:
  print('Wearing a mask in public settings, particularly in indoor settings or areas where there is a high transmission of COVID-19')
elif 6000 < predictions < 7000:
  print('Using hand sanitizer or washing your hands frequently, especially after being in public places')
elif 7000 < predictions < 8000:
  print('Its essential to follow public health guidelines, such as wearing a mask, social distancing, and washing hands frequently, to prevent the spread of COVID-19')
elif 8000 < predictions < 9000:
  print('Staying home if you are feeling unwell or have been in close contact with someone who has tested positive for COVID-19')
elif 9000 < predictions < 10000:
  print('Consider getting vaccinated as soon as possible, as its one of the most effective ways to protect yourself from COVID-19')
else :
  print('Keep in mind that even if you are safe, the situation can change rapidly, and its important to remain vigilant and follow public health guidelines at all times')